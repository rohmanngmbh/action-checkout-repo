name: "Checkout Repo"

description: "Action to checkout GIT Repository with special reference handling."

branding:
  icon: "download"
  color: "green"

inputs:
  repository:
    description: 'Repository name with owner. For example, actions/checkout'
    default: ${{ github.repository }}
    required: false
  ref:
    description: >
      The branch, tag or SHA to checkout. When checking out the repository that
      triggered a workflow, this defaults to the reference or SHA for that
      event.  Otherwise, uses the default branch.
    required: false
    default: ${{ github.ref }}
  alt_ref:
    description: >
      The alternative branch, tag or SHA to checkout. When checking out the repository that
      triggered a workflow, this defaults to the reference or SHA for that event. Otherwise, uses the default branch.
    required: false
  order:
    description: >
      Direction of sort in case of a regular expression for your reference. ('top' or 'down')
      Example: In case if ref=v* with tags v1, v2, v3 you will get v3 as a valid reference
    required: false
    default: 'top'
  token:
    description: >
      Personal access token (PAT) used to fetch the repository. The PAT is configured
      with the local git config, which enables your scripts to run authenticated git
      commands. The post-job step removes the PAT.
      We recommend using a service account with the least permissions necessary.
      Also when generating a new PAT, select the least scopes necessary.
      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
    required: false
    default: ${{ github.token }}
  path:
    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'
    required: false
    default: ''
  lfs:
    description: 'Whether to download Git-LFS files'
    required: false
    default: 'false'
  regex_next_to_last:
    description: >
      In case of a regular expression matches your selected sha with the head of your default branch: here you can select the behavior.
      Is the value false (default) the found sha will be taken. Is the value true, the last matching regex before the matching sha will be taken.
      Example: In case if ref=v* with tags v1, v2, v3 you will get v3 as a valid reference. Is the v3 on the same sha with your main (default branch) and this flag is true. We will switch to v2 (next to last).
    required: false
    default: 'false'
  submodules:
    description: >
      Whether to checkout submodules: `true` to checkout submodules or `recursive` to
      recursively checkout submodules.
    required: false
    default: 'false'
  include:
    description: >
      Explicitly include files for LFS
    required: false
    default: '*'
  exclude:
    description: >
      Explicitly exclude files for LFS
    required: false
    default: ''
  enableCrossOsArchive:
    description: >
      Whether the cache is cross-os compatible. This is useful to cache dependencies which
      are independent of the runner platform. This will help reduce the consumption of the
      cache quota and help build for multiple platforms from the same cache.
      [Learn more about cross-os caching](https://github.com/actions/cache/blob/main/tips-and-workarounds.md#cross-os-cache).
    required: false
    default: false

runs:
  using: "composite"
  steps:
    # Show debug information
    - name: Show debug information
      run: |
          echo "github repo: ${{ github.repository }}"
          echo "input repo: ${{ inputs.repository }}"
      shell: bash

    # Call normal checkout action: see https://github.com/actions/checkout
    # use default branch (or the reference)
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        repository:  ${{ inputs.repository }}
        token: ${{ inputs.token }}
        path: ${{ inputs.path }}
        lfs: ${{ inputs.lfs }}   
        submodules:  ${{ inputs.submodules }}   
        fetch-depth: 0
   
    # Call normal checkout action: see https://github.com/actions/checkout
    # this is neccessary for own ci test
    - name: Checkout own action code
      if: ${{ github.repository == 'rohmanngmbh/action-checkout-repo' }}
      uses: actions/checkout@v5
      with:
        repository: rohmanngmbh/action-checkout-repo
        ref: ${{ github.ref }}
        path: .temp

    # Call normal checkout action: see https://github.com/actions/checkout
    - name: Checkout own action code
      if: ${{ github.repository != 'rohmanngmbh/action-checkout-repo' }}
      uses: actions/checkout@v5
      with:
        repository: rohmanngmbh/action-checkout-repo
        ref: develop       # <<<<< release tag or main
        path: .temp

    # Run python (environment variables has to be set separately https://github.com/actions/runner/issues/665)
    - name: Run handle reference on linux/mac
      if: ${{ runner.os != 'Windows' }}
      env:
        INPUT_TOKEN: ${{ inputs.token }}
        INPUT_REPOSITORY:  ${{ inputs.repository }}
        INPUT_REF: ${{ inputs.ref }}
        INPUT_ALT_REF: ${{ inputs.alt_ref }}
        INPUT_ORDER: ${{ inputs.order }}
      shell: bash
      run: |
        cd .temp
        echo $RUSTUP_HOME
        echo $PATH
        export PATH="/home/rohbot/.cargo/bin:$PATH"
        export PATH="/opt/rust/bin:$PATH"
        export RUSTUP_HOME="/opt/rust"
        python3 -m venv ~/venvs/venv3
        source ~/venvs/venv3/bin/activate
        echo "*************** Post-Run Checkout ***************"
        python3 -m pip install --upgrade pip
        pip3 install -r requirements.txt
        python3 main.py
        deactivate
        python3 -m venv ~/venvs/venv3 --clear
        rm -rf ~/venvs/venv3
        cd ..
        echo "*************** Start Checkout ***************"

    # Run python (environment variables has to be set separately https://github.com/actions/runner/issues/665)
    - name: Run handle reference on windows
      if: ${{ runner.os == 'Windows' }}
      env:
        INPUT_TOKEN: ${{ inputs.token }}
        INPUT_REPOSITORY:  ${{ inputs.repository }}
        INPUT_REF: ${{ inputs.ref }}
        INPUT_ALT_REF:  ${{ inputs.alt_ref }}
        INPUT_ORDER: ${{ inputs.order }}
      shell: cmd
      run: |
        echo "*************** Post-Run Checkout ***************"
        cd .temp
        pip install --upgrade pip
        pip install -r requirements.txt
        python main.py
        cd ..
        echo "*************** Start Checkout ***************"
  
    # Show ref information
    - name: Show ref information
      run: |
          echo "input_ref: ${{ inputs.ref }}"
          echo "input_alt_ref: ${{ inputs.alt_ref }}"
          echo "my_ref: ${{ env.my_ref }}"
          echo "is_default_branch: ${{ env.is_default_branch }}"
          echo "ref_type: ${{ env.ref_type }}"
      shell: bash

    # Switch reference of cloned repo
    - name: Switch reference of cloned repo
      if: ${{ inputs.path == '' }}
      run: |
        git checkout ${{env.my_ref}}
      shell: bash

    # Switch reference of cloned repo
    - name: Switch reference of cloned repo
      if: ${{ inputs.path != '' }}
      run: |
        cd ${{ inputs.path }}
        git checkout ${{env.my_ref}}
      shell: bash

    # Get sha
    - name: Get sha
      if: ${{ inputs.path == '' }}
      run: |
        git rev-parse HEAD
      shell: bash

    # Get sha
    - name: Get sha
      if: ${{ inputs.path != '' }}
      run: |
        cd ${{ inputs.path }}
        git rev-parse HEAD
      shell: bash

    # Handle git lfs stuff: see https://github.com/nschloe/action-cached-lfs-checkout
    # in case of base path
    - name: Create LFS file list
      if: ${{ inputs.lfs == 'true' &&  inputs.path == '' }}
      run: |
        git lfs ls-files --long --include  "${{ inputs.include }}" --exclude  "${{ inputs.exclude }}" | cut -d ' ' -f1 > .lfs-assets-id-unsorted
        git submodule foreach git lfs ls-files --long --include  "${{ inputs.include }}" --exclude  "${{ inputs.exclude }}" | cut -d ' ' -f1 >> .lfs-assets-id-unsorted
        cat .lfs-assets-id-unsorted | sort > .lfs-assets-id
      shell: bash

    - name: Create Submodule LFS Cache Paths
      if: ${{ inputs.lfs == 'true' &&  inputs.path == '' }}
      run: |
        CACHE_PATHS=""

        # loop over the git submodule paths to generate a list of module directories to cache
        # `git config` is used to extract the `path` value for each git submodule
        # for more information about the .gitmodules file, see: https://git-scm.com/docs/gitmodules
        while read line; do
          CACHE_PATHS+=".git/modules/$line/lfs "
        done < <(git config --file .gitmodules --get-regexp path | awk '{ print $2 }')

        echo "CACHE_PATHS=$CACHE_PATHS" >> $GITHUB_OUTPUT
      id: cache-paths
      shell: bash

    - name: Restore LFS cache
      if: ${{ inputs.lfs == 'true' &&  inputs.path == '' }}
      uses: actions/cache@v4
      id: lfs-cache-base
      with:
        path: |
          .git/lfs
          ${{ steps.cache-paths.outputs.CACHE_PATHS }}
        key: lfs-${{ hashFiles('.lfs-assets-id') }}-v2
        enableCrossOsArchive: ${{ inputs.enableCrossOsArchive }}

    - name: Git LFS Pull
      if: ${{ inputs.lfs == 'true' &&  inputs.path == '' }}
      run: |
        git lfs pull --include  "${{ inputs.include }}" --exclude  "${{ inputs.exclude }}"
        git submodule foreach git lfs pull --include  "${{ inputs.include }}" --exclude  "${{ inputs.exclude }}"
      shell: bash

    # Don't leave behind temp files in case build system checks for dirty workspace
    - name: Cleanup Temp Files
      if: ${{ inputs.lfs == 'true' &&  inputs.path == '' }}
      run: |
        rm .lfs-assets-id-unsorted
        rm .lfs-assets-id
      shell: bash

    # in case of special path
    - name: Create LFS file list
      if: ${{ inputs.lfs == 'true' &&  inputs.path != '' }}
      run: |
        cd ${{ inputs.path }}
        git lfs ls-files --long --include  "${{ inputs.include }}" --exclude  "${{ inputs.exclude }}" | cut -d ' ' -f1 | sort > .lfs-assets-id
      shell: bash

    - name: Restore LFS cache
      if: ${{ inputs.lfs == 'true' &&  inputs.path != '' }}
      uses: actions/cache@v4
      id: lfs-cache-special
      with:
        path: ${{ inputs.path }}/.git/lfs
        key: lfs-${{ hashFiles('.lfs-assets-id') }}-v1

    - name: Git LFS Pull
      if: ${{ inputs.lfs == 'true' &&  inputs.path != ''}}
      run: |
        cd ${{ inputs.path }}
        git lfs pull --include  "${{ inputs.include }}" --exclude  "${{ inputs.exclude }}"
      shell: bash
